{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","axios","get","then","response","data","newObject","post","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","console","log","length","toggleImportanceOf","find","n","changedNote","returnedNote","map","catch","error","setTimeout","filter","notesToShow","key","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"uOAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,KCS3B,EAfA,WAEb,OADgBK,IAAMC,IAHR,cAICC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAa5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KARR,aAQsBD,GACrBH,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAbF,aAaE,YAAwBD,GAAMF,GAC/BH,KAAK,SAAAC,GAAQ,OAAIA,EAASC,Q,4NCV3C,IA+FMK,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,yBAAKb,UAAU,SACZa,IAKDC,EAAS,WAOb,OACE,yBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKR,6BACA,uGAKSC,EA1HH,SAACC,GAAW,IAAD,EACKC,mBAAS,IADd,mBACdC,EADc,KACPC,EADO,OAESF,mBAC5B,iBAHmB,mBAEdG,EAFc,KAELC,EAFK,OAKSJ,oBAAS,GALlB,mBAKdK,EALc,KAKLC,EALK,OAMmBN,mBAAS,MAN5B,mBAMdO,EANc,KAMAC,EANA,KAQrBC,oBAAU,WACTC,IAEE1B,KAAK,SAAA2B,GACNT,EAASS,MAER,IACHC,QAAQC,IAAI,SAAUZ,EAAMa,OAAQ,SAEpC,IAAMC,EAAqB,SAAA1B,GACjB,sCAAkCA,GAA3C,IACMd,EAAO0B,EAAMe,KAAK,SAAAC,GAAC,OAAIA,EAAE5B,KAAOA,IAChC6B,E,qVAAW,IAAQ3C,EAAR,CAAcG,WAAYH,EAAKG,YAEhDgC,EACSrB,EAAI6B,GACXlC,KAAK,SAAAmC,GACAjB,EAASD,EAAMmB,IAAI,SAAA7C,GAAI,OAAIA,EAAKc,KAAOA,EAAKd,EAAO4C,OAEzDE,MAAM,SAAAC,GACNd,EAAgB,SAAD,OACPjC,EAAKK,QADE,sCAGf2C,WAAW,WACVf,EAAgB,OACd,KACHN,EAASD,EAAMuB,OAAO,SAAAP,GAAC,OAAIA,EAAE5B,KAAOA,QAIhCoC,EAAcpB,EAChBJ,EACAA,EAAMuB,OAAO,SAAAjD,GAAI,OAAuB,IAAnBA,EAAKG,YA8B9B,OACE,6BACE,qCACH,kBAAC,EAAD,CAAcc,QAASe,IACvB,6BACK,4BAAQ1B,QAAS,kBAAMyB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BAtCeoB,EAAYL,IAAI,SAAA7C,GAAI,OACrC,kBAAC,EAAD,CACEmD,IAAKnD,EAAKc,GACVd,KAAMA,EACTC,iBAAkB,kBAAMuC,EAAmBxC,EAAKc,UAqChD,0BAAMsC,SAlCS,SAACC,GAChBA,EAAMC,iBACN,IAAMC,EAAa,CACpBlD,QAASuB,EACT4B,MAAM,IAAIC,MAAOC,cACjBvD,UAAWwD,KAAKC,SAAW,GAC3B9C,GAAIY,EAAMa,OAAS,GAGpBJ,EACaoB,GACP9C,KAAK,SAAAmC,GACJjB,EAASD,EAAMmC,OAAOjB,IACtBf,EAAW,QAsBX,2BACLiC,MAAOlC,EACPmC,SAnBwB,SAACV,GACxBxB,EAAWwB,EAAMW,OAAOF,UAqBpB,4BAAQG,KAAK,UAAb,SAEL,kBAAC,EAAD,Q,MC1FHC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.1de82b82.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li className='note'>\n      {note.content} \n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState(\n    'a new note...'\n  )\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n  \n  useEffect(() => {\n\t  noteService\n\t\t  .getAll()\n\t\t  .then(initialNotes => {\n\t\t  setNotes(initialNotes)\n      })\n  }, []) //empty array means useEffect only runs once on render\n  console.log('render', notes.length, 'notes')\n  \n  const toggleImportanceOf = id => {\n\t  const url = `http://localhost:3001/notes/${id}`\n\t  const note = notes.find(n => n.id === id)\n\t  const changedNote = { ...note, important: !note.important }\n\n\t  noteService\n\t\t  .update(id, changedNote)\n\t\t  .then(returnedNote => {\n          setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n\t  .catch(error => {\n\t\t  setErrorMessage(\n\t\t\t`Note '${note.content}' was already removed from server`\n\t\t\t)\n\t\t  setTimeout(() => {\n\t\t\t  setErrorMessage(null)\n\t\t  }, 5000)\n\t\t  setNotes(notes.filter(n => n.id !== id))\n  \t  })\n\t}\n  \n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true)\n  const rows = () => notesToShow.map(note =>\n    <Note\n      key={note.id}\n      note={note}\n\t  toggleImportance={() => toggleImportanceOf(note.id)}\n    />\n  )\n  const addNote = (event) => {\n\t  event.preventDefault()\n\t  const noteObject = {\n\t\tcontent: newNote,\n\t\tdate: new Date().toISOString(),\n\t\timportant: Math.random() > 0.5,\n\t\tid: notes.length + 1,\n\t  }\n\t  \n\tnoteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n    })\n\n  }\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n\t  <Notification message={errorMessage} />\n\t  <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>\n      <ul>\n        {rows()}\n      </ul>\n\t  <form onSubmit={addNote}>\n        <input \n\t\t\tvalue={newNote} \n\t\t\tonChange={handleNoteChange}\n\t\t/>\n\t\t\n        <button type=\"submit\">save</button>\n      </form>   \n\t  <Footer />\n    </div>\n  )\n}\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2019</em>\n    </div> \n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}